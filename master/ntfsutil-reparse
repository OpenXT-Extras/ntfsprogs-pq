diff --git a/include/ntfs/reparse.h b/include/ntfs/reparse.h
index 27b3321..198828a 100644
--- a/include/ntfs/reparse.h
+++ b/include/ntfs/reparse.h
@@ -88,6 +88,7 @@ int ntfs_set_ntfs_reparse_data(const char *path, const char *value,
 int ntfs_remove_ntfs_reparse_data(const char *path, ntfs_inode *ni);
 
 int ntfs_set_reparse_point(const char *path, ntfs_inode *ni, REPARSE_POINT *point);
+int ntfs_update_reparse_index(ntfs_inode *ni, REPARSE_POINT *point);
 
 int ntfs_extract_reparse_data(REPARSE_POINT *rp, char **data);
 int ntfs_parse_reparse_path(const char *data, char **vol, char **path);
diff --git a/libntfs/reparse.c b/libntfs/reparse.c
index 77f5b01..f2e814d 100644
--- a/libntfs/reparse.c
+++ b/libntfs/reparse.c
@@ -1032,7 +1032,7 @@ int ntfs_remove_ntfs_reparse_data(const char *path  __attribute__((unused)),
 	return (res ? -1 : 0);
 }
 
-static int
+int
 ntfs_update_reparse_index(ntfs_inode *ni, REPARSE_POINT *point)
 {
 	int ie_size, ret;
diff --git a/ntfsprogs/Makefile.am b/ntfsprogs/Makefile.am
index 4b68abb..94edafc 100644
--- a/ntfsprogs/Makefile.am
+++ b/ntfsprogs/Makefile.am
@@ -102,7 +102,8 @@ ntfscmp_LDFLAGS		= $(AM_LFLAGS)
 
 ntfsutil_SOURCES        = ntfsutil.c ntfsutil.h ntfsutil-lib.c ntfsutil-lib.h utils.c utils.h \
 			  ntfsutil-rm.c \
-			  ntfsutil-mkdir.c
+			  ntfsutil-mkdir.c \
+			  ntfsutil-reparse.c
 ntfsutil_LDADD          = $(AM_LIBS)
 ntfsutil_LDFLAGS        = $(AM_LFLAGS)
 
diff --git a/ntfsprogs/ntfsutil-reparse.c b/ntfsprogs/ntfsutil-reparse.c
new file mode 100644
index 0000000..22fa879
--- /dev/null
+++ b/ntfsprogs/ntfsutil-reparse.c
@@ -0,0 +1,423 @@
+/*
+ * ntfsreparse
+ *
+ * This utility will create a reparse point.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program (in the main directory of the Linux-NTFS
+ * distribution in the file COPYING); if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "config.h"
+
+#ifdef HAVE_STDIO_H
+#include <stdio.h>
+#endif
+#ifdef HAVE_GETOPT_H
+#include <getopt.h>
+#endif
+#ifdef HAVE_STDLIB_H
+#include <stdlib.h>
+#endif
+#ifdef HAVE_STRING_H
+#include <string.h>
+#endif
+
+#include "types.h"
+#include "attrib.h"
+#include "dir.h"
+#include "utils.h"
+#include "index.h"
+#include "version.h"
+#include "reparse.h"
+#include "ntfsutil.h"
+#include "ntfsutil-lib.h"
+
+#define JUNCTION_HEADER "\\??\\"
+#define VOLUME_JUNCTION_HEADER JUNCTION_HEADER"Volume{"
+
+struct ntfsutil_reparse_ctx {
+	struct ntfsutil_reparse_options   opts;
+	struct ntfsutil_target            tgt;
+	const char                       *filter;
+};
+
+/**
+ * usage - Print a list of the parameters to the program
+ *
+ * Print a list of the parameters and options for the program.
+ *
+ * Return:  none
+ */
+static void usage(const char *app)
+{
+	ntfs_log_info("\nUsage: %s [options] image[:directory]\n\n"
+		"    -t, --target               Mount point target\n"
+	        "    -d, --dump                 Dump reparse index\n"
+		"    -F, --force-mount          Mount dirty vols\n"
+		"    -V, --version              Version information\n"
+		"    -h, --help                 Print this help\n"
+		"    --log-{progress,quiet,verbose,trace,debug}\n\n", app);
+}
+
+/**
+ * parse_options - Read and validate the programs command line
+ *
+ * Read the command line, verify the syntax and parse the options.
+ * This function is very long, but quite simple.
+ *
+ * returns 0 if application should proceed, 1 otherwise, errno set on failure
+ */
+static int parse_options(struct ntfsutil_reparse_options *opts,
+			 int argc, char **argv)
+{
+	static const char *sopt = "-t:dFVh?";
+	static const struct option lopt[] = {
+		{ "target",         required_argument,  NULL, 't' },
+		{ "dump",	    no_argument,	NULL, 'd' },
+		{ "force-mount",    no_argument,	NULL, 'F' },
+		{ "version",	    no_argument,	NULL, 'V' },
+		{ "help",	    no_argument,	NULL, 'h' },
+		{ NULL,		    0,			NULL, 0   }
+	};
+
+	int c, err, help, version;
+
+	err     = 0;
+	help    = 0;
+	version = 0;
+
+	optind  = 0;
+	opterr  = 0;
+
+	ntfs_log_clear_levels(NTFS_LOG_LEVEL_PROGRESS);
+
+	while ((c = getopt_long(argc, argv, sopt, lopt, NULL)) != -1) {
+		switch (c) {
+		case 1:	/* A non-option argument */
+			if (!opts->tgt)
+				opts->tgt = argv[optind - 1];
+			else {
+				ntfs_log_error("You must specify exactly one "
+					       "path.\n");
+				err = 1;
+			}
+			break;
+		case 't':
+			opts->target = optarg;
+			break;
+		case 'd':
+			opts->dump = 1;
+			break;
+		case 'F':
+			opts->force_mount = 1;
+			break;
+		case 'V':
+			version++;
+			break;
+		case 'h':
+		case '?':
+			if (strncmp(argv[optind-1], "--log-", 6) == 0) {
+				if (!strcmp(argv[optind - 1], "--log-progress"))
+					ntfs_log_set_levels(NTFS_LOG_LEVEL_PROGRESS);
+				else if (!ntfs_log_parse_option(argv[optind-1]))
+					err = 1;
+				break;
+			}
+			help++;
+			break;
+		default:
+			ntfs_log_error("Unknown option '%s'.\n", argv[optind-1]);
+			err = 1;
+			break;
+		}
+	}
+
+	if (!help && !version) {
+		if (!opts->tgt) {
+			ntfs_log_error("You must specify a device.\n");
+			err = 1;
+		}
+	}
+
+	if (help || version || err) {
+		ntfs_log_set_levels(NTFS_LOG_LEVEL_VERBOSE);
+		if (version)
+			ntfsutil_version();
+		if (help || err)
+			usage(argv[0]);
+		errno = (err ? EINVAL : 0);
+		err = 1;
+	}
+
+	return err;
+}
+
+static int
+ntfsutil_dump_reparse_point(ntfs_inode *inode)
+{
+	le32 type;
+	int ret, size;
+	char *vol, *path, *file;
+
+	ret  = 1;
+	vol  = NULL;
+	path = NULL;
+	file = NULL;
+
+	if (ntfs_read_reparse_path(inode, &type, &vol, &path)) {
+		ntfs_log_perror("reading reparse data");
+		goto out;
+	}
+
+/*
+	size = 4096;
+	file = ntfs_calloc(size);
+	if (!file) {
+		ntfs_log_perror("nomem");
+		goto out;
+	}
+
+	if (utils_inode_get_name(inode, file, size)) {
+		ntfs_log_perror("converting inode to name");
+		goto out;
+	}
+*/
+
+//	printf("file    %s\n", file);
+	printf("file    0x%016llx\n", inode->mft_no);
+	printf("type    0x%08x\n", le32_to_cpu(type));
+	printf("vol     %s\n", vol);
+	printf("path    %s\n", path);
+
+	ret = 0;
+
+out:
+	free(vol);
+	free(path);
+	free(file);
+	return ret;
+}
+
+static int
+ntfsutil_dump_reparse_index(struct ntfsutil_reparse_ctx *ctx)
+{
+	int ret;
+	ntfs_inode *ni;
+	REPARSE_INDEX_KEY *key;
+	ntfs_index_context *icx;
+
+	ret = -1;
+	ni  = NULL;
+
+	ni = ntfs_pathname_to_inode(ctx->tgt.vol, NULL, REPARSE_INDEX);
+	if (!ni) {
+		ntfs_log_perror("opening reparse index");
+		goto out;
+	}
+
+	icx = ntfs_index_ctx_get(ni, NTFS_INDEX_R, 2);
+	if (!icx)
+		goto out;
+
+	while (!(ret = ntfs_index_iterate_next(icx))) {
+		int rc;
+		ntfs_inode *rni;
+
+		if (le16_to_cpu(icx->entry->key_length) != sizeof(*key)) {
+			errno = EIO;
+			ntfs_log_perror("invalid key size found");
+			goto out;
+		}
+
+		key = &icx->entry->key.reparse;
+
+		rni = ntfs_inode_open(ctx->tgt.vol, MREF_LE(key->file_id));
+		if (!rni) {
+			ntfs_log_perror("opening 0x%016llx\n",
+					le64_to_cpu(key->file_id));
+			goto out;
+		}
+
+		rc = ntfsutil_dump_reparse_point(rni);
+		printf("\n");
+		ntfs_inode_close(rni);
+		if (rc)
+			goto out;
+	}
+
+	if (errno != ENOENT)
+		ntfs_log_perror("iterating index");
+	else
+		ret = 0;
+
+out:
+	if (icx)
+		ntfs_index_ctx_put(icx);
+	if (ni)
+		ntfs_inode_close(ni);
+	return ret;
+}
+
+static int
+ntfsutil_validate_target(const char *target)
+{
+	int ret, len;
+
+	ret = 1;
+
+	if (strncmp(JUNCTION_HEADER, target, strlen(JUNCTION_HEADER))) {
+		ntfs_log_error("target path must begin with %s\n",
+			       JUNCTION_HEADER);
+		goto out;
+	}
+
+	len = strlen(target);
+
+	if (strncmp(VOLUME_JUNCTION_HEADER, target,
+		    min(strlen(VOLUME_JUNCTION_HEADER), len)))
+		goto done;
+
+	if (strstr(target, "}\\") != target + len - 2) {
+		ntfs_log_error("volume target path must end with '}\\'\n");
+		goto out;
+	}
+
+done:
+	ret = 0;
+out:
+	if (ret)
+		errno = EINVAL;
+	return ret;
+}
+
+/**
+ * _ntfsutil_reparse() - list or create ntfs reparse points
+ */
+int
+_ntfsutil_reparse(struct ntfsutil_reparse_options *opts)
+{
+	int ret, flags;
+	ntfs_inode *inode;
+	size_t reparse_point_size;
+	REPARSE_POINT *reparse_point;
+	struct ntfsutil_reparse_ctx ctx;
+
+	ret           = 1;
+	inode         = NULL;
+	reparse_point = NULL;
+
+	memset(&ctx, 0, sizeof(ctx));
+	memcpy(&ctx.opts, opts, sizeof(*opts));
+
+	if (ctx.opts.target)
+		if (ntfsutil_validate_target(ctx.opts.target))
+			goto out;
+
+	if (ntfsutil_parse_target(ctx.opts.tgt, &ctx.tgt)) {
+		ntfs_log_error("parsing target");
+		goto out;
+	}
+
+	if (!ctx.tgt.image || !ctx.tgt.path) {
+		errno = EINVAL;
+		ntfs_log_perror("target must have form image:path");
+		goto out;
+	}
+
+	flags = (ctx.opts.force_mount ? NTFS_MNT_FORCE : 0);
+	ctx.tgt.vol = utils_mount_volume(ctx.tgt.image, flags);
+	if (!ctx.tgt.vol) {
+		ntfs_log_perror("ERROR: couldn't mount volume");
+		goto out;
+	}
+
+	if (ctx.opts.dump) {
+		ret = ntfsutil_dump_reparse_index(&ctx);
+		goto out;
+	}
+
+	inode = ntfs_pathname_to_inode(ctx.tgt.vol, NULL, ctx.tgt.path);
+	if (!inode) {
+		ntfs_log_perror("ERROR: couldn't open inode");
+		goto out;
+	}
+
+	if (!(inode->mrec->flags & MFT_RECORD_IS_DIRECTORY)) {
+		errno = ENOTDIR;
+		ntfs_log_error("ERROR: %s is not a directory\n",
+			       ctx.tgt.path);
+		goto out;
+	}
+
+	if (ntfs_check_empty_dir(inode)) {
+		ntfs_log_perror("ERROR: directory not empty");
+		goto out;
+	}
+
+	if (!ctx.opts.target) {
+		ret = ntfsutil_dump_reparse_point(inode);
+		goto out;
+	}
+
+	if (ntfs_allocate_reparse_mount_point(ctx.opts.target,
+					      &reparse_point,
+					      &reparse_point_size)) {
+		ntfs_log_perror("ERROR: allocating reparse point");
+		goto out;
+	}
+
+	if (ntfs_set_reparse_point(ctx.tgt.path, inode, reparse_point)) {
+		ntfs_log_perror("ERROR: couldn't add reparse point");
+		goto out;
+	}
+
+	ret = 0;
+
+out:
+	if (inode)
+		ntfs_inode_close(inode);
+	if (ctx.tgt.vol)
+		ntfs_umount(ctx.tgt.vol, FALSE);
+	free(reparse_point);
+	free(ctx.tgt.image);
+	free(ctx.tgt.path);
+
+	return ret;
+}
+
+/**
+ * ntfsutil_reparse() - parse command line options
+ *                      and return _ntfsutil_reparse()
+ */
+int
+ntfsutil_reparse(int argc, char *argv[])
+{
+	int ret;
+	struct ntfsutil_reparse_options opts;
+
+	ret = 1;
+	memset(&opts, 0, sizeof(opts));
+
+	if (parse_options(&opts, argc, argv)) {
+		if (!errno)
+			ret = 0;
+		goto out;
+	}
+
+	ret = _ntfsutil_reparse(&opts);
+
+out:
+	return ret;
+}
diff --git a/ntfsprogs/ntfsutil.c b/ntfsprogs/ntfsutil.c
index e799d11..97cabbf 100644
--- a/ntfsprogs/ntfsutil.c
+++ b/ntfsprogs/ntfsutil.c
@@ -50,6 +50,7 @@ struct command {
 static struct command commands[] = {
 	{ .name = "rm",        .func = ntfsutil_rm },
 	{ .name = "mkdir",     .func = ntfsutil_mkdir },
+	{ .name = "reparse",   .func = ntfsutil_reparse },
 };
 
 /**
diff --git a/ntfsprogs/ntfsutil.h b/ntfsprogs/ntfsutil.h
index 75cd7c1..1f2778c 100644
--- a/ntfsprogs/ntfsutil.h
+++ b/ntfsprogs/ntfsutil.h
@@ -45,4 +45,14 @@ struct ntfsutil_mkdir_options {
 int ntfsutil_mkdir(int, char **);
 int _ntfsutil_mkdir(struct ntfsutil_mkdir_options *);
 
+struct ntfsutil_reparse_options {
+	char	  	            *tgt;    	  /* Device/File to work with */
+	char	 	            *target;	  /* Target of reparse point */
+	int                          dump;        /* Dump reparse index */
+	int		             force_mount; /* Mount dirty volumes */
+};
+
+int ntfsutil_reparse(int, char **);
+int _ntfsutil_reparse(struct ntfsutil_reparse_options *);
+
 #endif /* _NTFSUTIL_H_ */
